// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Sigmoid_axi,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.345312,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=212,HLS_VERSION=2018_2}" *)

module Sigmoid_axi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Output_1_V_V_ap_vld;
reg Output_2_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] lut_V_address0;
reg    lut_V_ce0;
wire   [9:0] lut_V_q0;
reg    Input_1_V_V_blk_n;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
reg    Output_2_V_V_blk_n;
wire   [0:0] tmp_fu_93_p2;
reg   [0:0] tmp_reg_219;
reg    ap_block_state1;
wire   [0:0] tmp_1_fu_99_p2;
reg   [0:0] tmp_1_reg_225;
wire   [63:0] tmp_8_fu_165_p1;
wire   [31:0] tmp_V_1_fu_213_p1;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_sig_ioackin_Output_2_V_V_ap_ack;
reg    ap_block_state2_io;
reg    ap_reg_ioackin_Output_2_V_V_ap_ack;
wire   [11:0] index_V_2_fu_105_p4;
wire   [22:0] p_Val2_2_fu_115_p3;
wire  signed [23:0] p_Val2_2_cast_fu_123_p1;
wire   [23:0] p_Val2_3_fu_135_p2;
wire   [11:0] tmp_3_fu_141_p4;
wire   [0:0] tmp_2_fu_127_p3;
wire   [11:0] index_V_fu_151_p2;
wire   [11:0] p_056_0_i_fu_157_p3;
wire   [18:0] result_V_fu_170_p3;
wire   [0:0] sel_tmp1_fu_182_p2;
wire   [0:0] sel_tmp2_fu_187_p2;
wire   [0:0] tmp_4_fu_200_p2;
wire   [19:0] sel_tmp_fu_192_p3;
wire   [19:0] result_V_cast_fu_178_p1;
wire   [19:0] p_Val2_s_fu_205_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_Output_2_V_V_ap_ack = 1'b0;
end

Sigmoid_axi_lut_V #(
    .DataWidth( 10 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
lut_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_V_address0),
    .ce0(lut_V_ce0),
    .q0(lut_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
            end else if ((1'b1 == Output_1_V_V_ap_ack)) begin
                ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
            end else if ((1'b1 == Output_2_V_V_ap_ack)) begin
                ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_reg_225 <= tmp_1_fu_99_p2;
        tmp_reg_219 <= tmp_fu_93_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_2_V_V_ap_vld = 1'b1;
    end else begin
        Output_2_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Output_2_V_V_blk_n = Output_2_V_V_ap_ack;
    end else begin
        Output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = Output_2_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
        lut_V_ce0 = 1'b1;
    end else begin
        lut_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V = tmp_V_1_fu_213_p1;

assign Output_2_V_V = tmp_V_1_fu_213_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state2_io = ((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign index_V_2_fu_105_p4 = {{Input_1_V_V[22:11]}};

assign index_V_fu_151_p2 = ($signed(12'd2048) - $signed(tmp_3_fu_141_p4));

assign lut_V_address0 = tmp_8_fu_165_p1;

assign p_056_0_i_fu_157_p3 = ((tmp_2_fu_127_p3[0:0] === 1'b1) ? index_V_fu_151_p2 : index_V_2_fu_105_p4);

assign p_Val2_2_cast_fu_123_p1 = $signed(p_Val2_2_fu_115_p3);

assign p_Val2_2_fu_115_p3 = {{index_V_2_fu_105_p4}, {11'd0}};

assign p_Val2_3_fu_135_p2 = ($signed(24'd0) - $signed(p_Val2_2_cast_fu_123_p1));

assign p_Val2_s_fu_205_p3 = ((tmp_4_fu_200_p2[0:0] === 1'b1) ? sel_tmp_fu_192_p3 : result_V_cast_fu_178_p1);

assign result_V_cast_fu_178_p1 = result_V_fu_170_p3;

assign result_V_fu_170_p3 = {{lut_V_q0}, {9'd0}};

assign sel_tmp1_fu_182_p2 = (tmp_reg_219 ^ 1'd1);

assign sel_tmp2_fu_187_p2 = (tmp_1_reg_225 & sel_tmp1_fu_182_p2);

assign sel_tmp_fu_192_p3 = ((sel_tmp2_fu_187_p2[0:0] === 1'b1) ? 20'd0 : 20'd524288);

assign tmp_1_fu_99_p2 = (($signed(Input_1_V_V) < $signed(32'd4292870144)) ? 1'b1 : 1'b0);

assign tmp_2_fu_127_p3 = Input_1_V_V[32'd22];

assign tmp_3_fu_141_p4 = {{p_Val2_3_fu_135_p2[22:11]}};

assign tmp_4_fu_200_p2 = (tmp_reg_219 | sel_tmp2_fu_187_p2);

assign tmp_8_fu_165_p1 = p_056_0_i_fu_157_p3;

assign tmp_V_1_fu_213_p1 = p_Val2_s_fu_205_p3;

assign tmp_fu_93_p2 = (($signed(Input_1_V_V) > $signed(32'd2097152)) ? 1'b1 : 1'b0);

endmodule //Sigmoid_axi
