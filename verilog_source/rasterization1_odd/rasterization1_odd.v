// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rasterization1_odd,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.799375,HLS_SYN_LAT=19,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=276,HLS_SYN_LUT=655,HLS_VERSION=2018_2}" *)

module rasterization1_odd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg[31:0] Output_1_V_V;
reg Output_1_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] max_min_V_0;
reg   [7:0] max_min_V_1;
reg   [7:0] max_min_V_2;
reg   [15:0] max_index_V_0;
reg   [7:0] max_min_V_3;
reg   [7:0] max_min_V_4;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    Output_1_V_V_blk_n;
wire   [0:0] tmp_1_fu_133_p2;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state20;
reg   [0:0] tmp_1_reg_571;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire   [7:0] triangle_2d_x1_V_1_fu_58_p1;
reg   [7:0] triangle_2d_x1_V_1_reg_491;
reg    ap_block_state1;
wire   [7:0] triangle_2d_y1_V_1_fu_62_p1;
reg   [7:0] triangle_2d_y1_V_1_reg_498;
wire   [7:0] triangle_2d_x0_V_fu_66_p1;
reg   [7:0] triangle_2d_x0_V_reg_505;
wire   [7:0] triangle_2d_y0_V_fu_70_p1;
reg   [7:0] triangle_2d_y0_V_reg_512;
wire   [7:0] triangle_2d_x2_V_fu_74_p1;
reg   [7:0] triangle_2d_x2_V_reg_519;
wire   [7:0] triangle_2d_y2_V_fu_78_p1;
reg   [7:0] triangle_2d_y2_V_reg_533;
wire   [8:0] rhs_V_2_fu_85_p1;
reg   [8:0] rhs_V_2_reg_546;
wire   [8:0] r_V_2_fu_88_p2;
reg  signed [8:0] r_V_2_reg_551;
wire   [8:0] rhs_V_3_fu_94_p1;
reg   [8:0] rhs_V_3_reg_556;
wire   [8:0] r_V_5_fu_101_p2;
reg  signed [8:0] r_V_5_reg_561;
wire   [7:0] triangle_2d_z_V_fu_107_p1;
reg   [7:0] triangle_2d_z_V_reg_566;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_state7_io;
reg   [7:0] max_min_V_0_load_reg_575;
reg   [7:0] max_min_V_1_load_reg_580;
reg   [7:0] max_min_V_2_load_reg_585;
wire   [7:0] triangle_2d_same_y1_s_fu_159_p3;
reg   [7:0] triangle_2d_same_y1_s_reg_590;
wire   [7:0] triangle_2d_same_x1_s_fu_165_p3;
reg   [7:0] triangle_2d_same_x1_s_reg_601;
wire   [7:0] triangle_2d_same_y0_s_fu_171_p3;
reg   [7:0] triangle_2d_same_y0_s_reg_612;
wire   [7:0] triangle_2d_same_x0_s_fu_177_p3;
reg   [7:0] triangle_2d_same_x0_s_reg_623;
wire   [7:0] agg_result_V_i_fu_223_p3;
reg   [7:0] agg_result_V_i_reg_634;
wire   [7:0] agg_result_V_i1_fu_261_p3;
reg   [7:0] agg_result_V_i1_reg_641;
wire   [7:0] agg_result_V_i2_fu_303_p3;
reg   [7:0] agg_result_V_i2_reg_648;
wire   [7:0] agg_result_V_i3_fu_341_p3;
reg   [7:0] agg_result_V_i3_reg_654;
wire   [7:0] tmp_3_fu_398_p2;
reg   [7:0] tmp_3_reg_660;
wire  signed [15:0] grp_fu_481_p3;
wire   [31:0] tmp_V_13_fu_183_p1;
wire   [31:0] tmp_V_14_fu_187_p1;
wire   [31:0] tmp_V_15_fu_191_p1;
wire   [31:0] tmp_V_16_fu_195_p1;
wire   [31:0] tmp_V_17_fu_275_p1;
wire   [31:0] tmp_V_18_fu_355_p1;
wire   [31:0] tmp_V_19_fu_359_p1;
wire   [31:0] tmp_V_20_fu_390_p1;
wire   [31:0] tmp_V_21_fu_394_p1;
wire   [31:0] tmp_V_22_fu_408_p1;
wire   [31:0] tmp_V_23_fu_412_p1;
wire   [31:0] tmp_V_24_fu_416_p1;
wire   [31:0] tmp_V_25_fu_420_p1;
wire   [31:0] tmp_V_12_fu_428_p1;
wire   [31:0] tmp_V_7_fu_437_p1;
wire   [31:0] tmp_V_8_fu_442_p1;
wire   [31:0] tmp_V_9_fu_446_p1;
wire   [31:0] tmp_V_10_fu_450_p1;
wire   [31:0] tmp_V_11_fu_458_p1;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_state20_io;
wire   [8:0] lhs_V_2_fu_82_p1;
wire   [8:0] lhs_V_5_fu_97_p1;
wire  signed [17:0] grp_fu_463_p3;
wire  signed [17:0] grp_fu_472_p3;
wire   [16:0] tmp_fu_117_p1;
wire   [16:0] tmp_2_fu_126_p1;
(* use_dsp48 = "no" *) wire   [17:0] r_V_8_fu_129_p2;
wire   [0:0] tmp_7_fu_151_p3;
wire   [0:0] tmp_i_2_fu_203_p2;
wire   [0:0] tmp_7_i_fu_213_p2;
wire   [0:0] tmp_i_fu_199_p2;
wire   [7:0] in0_V_in2_V_i_fu_207_p3;
wire   [7:0] in1_V_in2_V_i_fu_217_p3;
wire   [0:0] tmp_i1_3_fu_241_p2;
wire   [0:0] tmp_8_i_fu_251_p2;
wire   [0:0] tmp_i1_fu_237_p2;
wire   [7:0] in0_V_in2_V_i1_fu_245_p3;
wire   [7:0] in1_V_in2_V_i1_fu_255_p3;
wire   [0:0] tmp_i2_4_fu_283_p2;
wire   [0:0] tmp_7_i1_fu_293_p2;
wire   [0:0] tmp_i2_fu_279_p2;
wire   [7:0] in0_V_in2_V_i2_fu_287_p3;
wire   [7:0] in1_V_in2_V_i2_fu_297_p3;
wire   [0:0] tmp_i3_5_fu_321_p2;
wire   [0:0] tmp_8_i1_fu_331_p2;
wire   [0:0] tmp_i3_fu_317_p2;
wire   [7:0] in0_V_in2_V_i3_fu_325_p3;
wire   [7:0] in1_V_in2_V_i3_fu_335_p3;
wire   [8:0] lhs_V_fu_363_p1;
wire   [8:0] rhs_V_fu_366_p1;
wire  signed [8:0] r_V_fu_369_p2;
wire   [7:0] grp_fu_463_p0;
wire   [7:0] grp_fu_463_p1;
wire   [7:0] grp_fu_472_p0;
wire   [7:0] grp_fu_472_p1;
wire   [7:0] grp_fu_481_p0;
wire   [7:0] grp_fu_481_p1;
reg   [31:0] ap_NS_fsm;
wire   [8:0] grp_fu_463_p00;
wire   [8:0] grp_fu_472_p00;
wire   [8:0] grp_fu_481_p00;
wire   [8:0] grp_fu_481_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 max_min_V_0 = 8'd0;
#0 max_min_V_1 = 8'd0;
#0 max_min_V_2 = 8'd0;
#0 max_index_V_0 = 16'd0;
#0 max_min_V_3 = 8'd0;
#0 max_min_V_4 = 8'd0;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
end

rasterization1_odbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
rasterization1_odbkb_U1(
    .din0(grp_fu_463_p0),
    .din1(grp_fu_463_p1),
    .din2(r_V_2_reg_551),
    .dout(grp_fu_463_p3)
);

rasterization1_odbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
rasterization1_odbkb_U2(
    .din0(grp_fu_472_p0),
    .din1(grp_fu_472_p1),
    .din2(r_V_5_reg_561),
    .dout(grp_fu_472_p3)
);

rasterization1_odcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
rasterization1_odcud_U3(
    .din0(grp_fu_481_p0),
    .din1(grp_fu_481_p1),
    .din2(r_V_fu_369_p2),
    .dout(grp_fu_481_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state20_io) & (1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd0)) | ((1'b0 == ap_block_state20_io) & (1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd1)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b1 == ap_block_state7_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd0)) | (~((1'b1 == ap_block_state7_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
        end else if ((((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd0)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd1)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state32)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state30)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd0)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        agg_result_V_i1_reg_641 <= agg_result_V_i1_fu_261_p3;
        agg_result_V_i_reg_634 <= agg_result_V_i_fu_223_p3;
        max_min_V_0 <= agg_result_V_i_fu_223_p3;
        max_min_V_1 <= agg_result_V_i1_fu_261_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        agg_result_V_i2_reg_648 <= agg_result_V_i2_fu_303_p3;
        agg_result_V_i3_reg_654 <= agg_result_V_i3_fu_341_p3;
        max_min_V_2 <= agg_result_V_i2_fu_303_p3;
        max_min_V_3 <= agg_result_V_i3_fu_341_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        max_index_V_0 <= grp_fu_481_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state7_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state7))) begin
        max_min_V_0_load_reg_575 <= max_min_V_0;
        max_min_V_1_load_reg_580 <= max_min_V_1;
        max_min_V_2_load_reg_585 <= max_min_V_2;
        tmp_1_reg_571 <= tmp_1_fu_133_p2;
        triangle_2d_z_V_reg_566 <= triangle_2d_z_V_fu_107_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        max_min_V_4 <= tmp_3_fu_398_p2;
        tmp_3_reg_660 <= tmp_3_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
        r_V_2_reg_551 <= r_V_2_fu_88_p2;
        r_V_5_reg_561 <= r_V_5_fu_101_p2;
        rhs_V_2_reg_546[7 : 0] <= rhs_V_2_fu_85_p1[7 : 0];
        rhs_V_3_reg_556[7 : 0] <= rhs_V_3_fu_94_p1[7 : 0];
        triangle_2d_y2_V_reg_533 <= triangle_2d_y2_V_fu_78_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state7_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd0))) begin
        triangle_2d_same_x0_s_reg_623 <= triangle_2d_same_x0_s_fu_177_p3;
        triangle_2d_same_x1_s_reg_601 <= triangle_2d_same_x1_s_fu_165_p3;
        triangle_2d_same_y0_s_reg_612 <= triangle_2d_same_y0_s_fu_171_p3;
        triangle_2d_same_y1_s_reg_590 <= triangle_2d_same_y1_s_fu_159_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
        triangle_2d_x0_V_reg_505 <= triangle_2d_x0_V_fu_66_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        triangle_2d_x1_V_1_reg_491 <= triangle_2d_x1_V_1_fu_58_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
        triangle_2d_x2_V_reg_519 <= triangle_2d_x2_V_fu_74_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
        triangle_2d_y0_V_reg_512 <= triangle_2d_y0_V_fu_70_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        triangle_2d_y1_V_1_reg_498 <= triangle_2d_y1_V_1_fu_62_p1;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state7_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state7)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        Output_1_V_V = tmp_V_11_fu_458_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        Output_1_V_V = tmp_V_10_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        Output_1_V_V = tmp_V_9_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        Output_1_V_V = tmp_V_8_fu_442_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        Output_1_V_V = tmp_V_7_fu_437_p1;
    end else if (((1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd1))) begin
        Output_1_V_V = tmp_V_12_fu_428_p1;
    end else if (((1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd0))) begin
        Output_1_V_V = tmp_V_25_fu_420_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        Output_1_V_V = tmp_V_24_fu_416_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        Output_1_V_V = tmp_V_23_fu_412_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        Output_1_V_V = tmp_V_22_fu_408_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        Output_1_V_V = tmp_V_21_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        Output_1_V_V = tmp_V_20_fu_390_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        Output_1_V_V = tmp_V_19_fu_359_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        Output_1_V_V = tmp_V_18_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        Output_1_V_V = tmp_V_17_fu_275_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Output_1_V_V = tmp_V_16_fu_195_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        Output_1_V_V = tmp_V_15_fu_191_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Output_1_V_V = tmp_V_14_fu_187_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        Output_1_V_V = tmp_V_13_fu_183_p1;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd1))) begin
        Output_1_V_V = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd0)))) begin
        Output_1_V_V = 32'd0;
    end else begin
        Output_1_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd0)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd1)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state32)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state30)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state23)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state22)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == Input_1_V_V_ap_vld) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd0)) | ((1'b1 == Input_1_V_V_ap_vld) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd1)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd0)) | ((1'b1 == ap_CS_fsm_state20) & (tmp_1_reg_571 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd1)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state20_io) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state20_io) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((1'b1 == ap_block_state7_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if ((~((1'b1 == ap_block_state7_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state7) & (tmp_1_fu_133_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b0 == ap_block_state20_io) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_i1_fu_261_p3 = ((tmp_i1_fu_237_p2[0:0] === 1'b1) ? in0_V_in2_V_i1_fu_245_p3 : in1_V_in2_V_i1_fu_255_p3);

assign agg_result_V_i2_fu_303_p3 = ((tmp_i2_fu_279_p2[0:0] === 1'b1) ? in0_V_in2_V_i2_fu_287_p3 : in1_V_in2_V_i2_fu_297_p3);

assign agg_result_V_i3_fu_341_p3 = ((tmp_i3_fu_317_p2[0:0] === 1'b1) ? in0_V_in2_V_i3_fu_325_p3 : in1_V_in2_V_i3_fu_335_p3);

assign agg_result_V_i_fu_223_p3 = ((tmp_i_fu_199_p2[0:0] === 1'b1) ? in0_V_in2_V_i_fu_207_p3 : in1_V_in2_V_i_fu_217_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state20_io = (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) & (tmp_1_reg_571 == 1'd0)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) & (tmp_1_reg_571 == 1'd1)));
end

always @ (*) begin
    ap_block_state7_io = (((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) & (tmp_1_fu_133_p2 == 1'd0)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) & (tmp_1_fu_133_p2 == 1'd1)));
end

assign grp_fu_463_p0 = grp_fu_463_p00;

assign grp_fu_463_p00 = triangle_2d_y0_V_reg_512;

assign grp_fu_463_p1 = rhs_V_3_reg_556;

assign grp_fu_472_p0 = grp_fu_472_p00;

assign grp_fu_472_p00 = triangle_2d_x0_V_reg_505;

assign grp_fu_472_p1 = rhs_V_2_reg_546;

assign grp_fu_481_p0 = grp_fu_481_p00;

assign grp_fu_481_p00 = agg_result_V_i3_reg_654;

assign grp_fu_481_p1 = grp_fu_481_p10;

assign grp_fu_481_p10 = agg_result_V_i2_reg_648;

assign in0_V_in2_V_i1_fu_245_p3 = ((tmp_i1_3_fu_241_p2[0:0] === 1'b1) ? triangle_2d_same_x0_s_reg_623 : triangle_2d_x2_V_reg_519);

assign in0_V_in2_V_i2_fu_287_p3 = ((tmp_i2_4_fu_283_p2[0:0] === 1'b1) ? triangle_2d_same_y0_s_reg_612 : triangle_2d_y2_V_reg_533);

assign in0_V_in2_V_i3_fu_325_p3 = ((tmp_i3_5_fu_321_p2[0:0] === 1'b1) ? triangle_2d_same_y0_s_reg_612 : triangle_2d_y2_V_reg_533);

assign in0_V_in2_V_i_fu_207_p3 = ((tmp_i_2_fu_203_p2[0:0] === 1'b1) ? triangle_2d_same_x0_s_reg_623 : triangle_2d_x2_V_reg_519);

assign in1_V_in2_V_i1_fu_255_p3 = ((tmp_8_i_fu_251_p2[0:0] === 1'b1) ? triangle_2d_same_x1_s_reg_601 : triangle_2d_x2_V_reg_519);

assign in1_V_in2_V_i2_fu_297_p3 = ((tmp_7_i1_fu_293_p2[0:0] === 1'b1) ? triangle_2d_same_y1_s_reg_590 : triangle_2d_y2_V_reg_533);

assign in1_V_in2_V_i3_fu_335_p3 = ((tmp_8_i1_fu_331_p2[0:0] === 1'b1) ? triangle_2d_same_y1_s_reg_590 : triangle_2d_y2_V_reg_533);

assign in1_V_in2_V_i_fu_217_p3 = ((tmp_7_i_fu_213_p2[0:0] === 1'b1) ? triangle_2d_same_x1_s_reg_601 : triangle_2d_x2_V_reg_519);

assign lhs_V_2_fu_82_p1 = triangle_2d_x2_V_reg_519;

assign lhs_V_5_fu_97_p1 = triangle_2d_y2_V_fu_78_p1;

assign lhs_V_fu_363_p1 = agg_result_V_i1_reg_641;

assign r_V_2_fu_88_p2 = (lhs_V_2_fu_82_p1 - rhs_V_2_fu_85_p1);

assign r_V_5_fu_101_p2 = (lhs_V_5_fu_97_p1 - rhs_V_3_fu_94_p1);

assign r_V_8_fu_129_p2 = ($signed(grp_fu_463_p3) - $signed(grp_fu_472_p3));

assign r_V_fu_369_p2 = (lhs_V_fu_363_p1 - rhs_V_fu_366_p1);

assign rhs_V_2_fu_85_p1 = triangle_2d_x1_V_1_reg_491;

assign rhs_V_3_fu_94_p1 = triangle_2d_y1_V_1_reg_498;

assign rhs_V_fu_366_p1 = agg_result_V_i_reg_634;

assign tmp_1_fu_133_p2 = ((tmp_fu_117_p1 == tmp_2_fu_126_p1) ? 1'b1 : 1'b0);

assign tmp_2_fu_126_p1 = grp_fu_472_p3[16:0];

assign tmp_3_fu_398_p2 = (agg_result_V_i1_reg_641 - agg_result_V_i_reg_634);

assign tmp_7_fu_151_p3 = r_V_8_fu_129_p2[32'd17];

assign tmp_7_i1_fu_293_p2 = ((triangle_2d_same_y1_s_reg_590 < triangle_2d_y2_V_reg_533) ? 1'b1 : 1'b0);

assign tmp_7_i_fu_213_p2 = ((triangle_2d_same_x1_s_reg_601 < triangle_2d_x2_V_reg_519) ? 1'b1 : 1'b0);

assign tmp_8_i1_fu_331_p2 = ((triangle_2d_same_y1_s_reg_590 > triangle_2d_y2_V_reg_533) ? 1'b1 : 1'b0);

assign tmp_8_i_fu_251_p2 = ((triangle_2d_same_x1_s_reg_601 > triangle_2d_x2_V_reg_519) ? 1'b1 : 1'b0);

assign tmp_V_10_fu_450_p1 = max_min_V_2_load_reg_585;

assign tmp_V_11_fu_458_p1 = max_min_V_3;

assign tmp_V_12_fu_428_p1 = max_min_V_4;

assign tmp_V_13_fu_183_p1 = triangle_2d_same_x0_s_reg_623;

assign tmp_V_14_fu_187_p1 = triangle_2d_same_y0_s_reg_612;

assign tmp_V_15_fu_191_p1 = triangle_2d_same_x1_s_reg_601;

assign tmp_V_16_fu_195_p1 = triangle_2d_same_y1_s_reg_590;

assign tmp_V_17_fu_275_p1 = triangle_2d_x2_V_reg_519;

assign tmp_V_18_fu_355_p1 = triangle_2d_y2_V_reg_533;

assign tmp_V_19_fu_359_p1 = triangle_2d_z_V_reg_566;

assign tmp_V_20_fu_390_p1 = $unsigned(grp_fu_481_p3);

assign tmp_V_21_fu_394_p1 = agg_result_V_i_reg_634;

assign tmp_V_22_fu_408_p1 = agg_result_V_i1_reg_641;

assign tmp_V_23_fu_412_p1 = agg_result_V_i2_reg_648;

assign tmp_V_24_fu_416_p1 = agg_result_V_i3_reg_654;

assign tmp_V_25_fu_420_p1 = tmp_3_reg_660;

assign tmp_V_7_fu_437_p1 = max_index_V_0;

assign tmp_V_8_fu_442_p1 = max_min_V_0_load_reg_575;

assign tmp_V_9_fu_446_p1 = max_min_V_1_load_reg_580;

assign tmp_fu_117_p1 = grp_fu_463_p3[16:0];

assign tmp_i1_3_fu_241_p2 = ((triangle_2d_same_x0_s_reg_623 > triangle_2d_x2_V_reg_519) ? 1'b1 : 1'b0);

assign tmp_i1_fu_237_p2 = ((triangle_2d_same_x0_s_reg_623 > triangle_2d_same_x1_s_reg_601) ? 1'b1 : 1'b0);

assign tmp_i2_4_fu_283_p2 = ((triangle_2d_same_y0_s_reg_612 < triangle_2d_y2_V_reg_533) ? 1'b1 : 1'b0);

assign tmp_i2_fu_279_p2 = ((triangle_2d_same_y0_s_reg_612 < triangle_2d_same_y1_s_reg_590) ? 1'b1 : 1'b0);

assign tmp_i3_5_fu_321_p2 = ((triangle_2d_same_y0_s_reg_612 > triangle_2d_y2_V_reg_533) ? 1'b1 : 1'b0);

assign tmp_i3_fu_317_p2 = ((triangle_2d_same_y0_s_reg_612 > triangle_2d_same_y1_s_reg_590) ? 1'b1 : 1'b0);

assign tmp_i_2_fu_203_p2 = ((triangle_2d_same_x0_s_reg_623 < triangle_2d_x2_V_reg_519) ? 1'b1 : 1'b0);

assign tmp_i_fu_199_p2 = ((triangle_2d_same_x0_s_reg_623 < triangle_2d_same_x1_s_reg_601) ? 1'b1 : 1'b0);

assign triangle_2d_same_x0_s_fu_177_p3 = ((tmp_7_fu_151_p3[0:0] === 1'b1) ? triangle_2d_x0_V_reg_505 : triangle_2d_x1_V_1_reg_491);

assign triangle_2d_same_x1_s_fu_165_p3 = ((tmp_7_fu_151_p3[0:0] === 1'b1) ? triangle_2d_x1_V_1_reg_491 : triangle_2d_x0_V_reg_505);

assign triangle_2d_same_y0_s_fu_171_p3 = ((tmp_7_fu_151_p3[0:0] === 1'b1) ? triangle_2d_y0_V_reg_512 : triangle_2d_y1_V_1_reg_498);

assign triangle_2d_same_y1_s_fu_159_p3 = ((tmp_7_fu_151_p3[0:0] === 1'b1) ? triangle_2d_y1_V_1_reg_498 : triangle_2d_y0_V_reg_512);

assign triangle_2d_x0_V_fu_66_p1 = Input_1_V_V[7:0];

assign triangle_2d_x1_V_1_fu_58_p1 = Input_1_V_V[7:0];

assign triangle_2d_x2_V_fu_74_p1 = Input_1_V_V[7:0];

assign triangle_2d_y0_V_fu_70_p1 = Input_1_V_V[7:0];

assign triangle_2d_y1_V_1_fu_62_p1 = Input_1_V_V[7:0];

assign triangle_2d_y2_V_fu_78_p1 = Input_1_V_V[7:0];

assign triangle_2d_z_V_fu_107_p1 = Input_1_V_V[7:0];

always @ (posedge ap_clk) begin
    rhs_V_2_reg_546[8] <= 1'b0;
    rhs_V_3_reg_556[8] <= 1'b0;
end

endmodule //rasterization1_odd
