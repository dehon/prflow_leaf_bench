// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Output_1_V_V_ap_vld;
reg Output_2_V_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    Output_1_V_V_blk_n;
reg    Output_2_V_V_blk_n;
reg    ap_block_state1;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_sig_ioackin_Output_2_V_V_ap_ack;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
reg    ap_reg_ioackin_Output_2_V_V_ap_ack;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_Output_2_V_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if (((~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state3)) | (~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
        end else if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == Output_1_V_V_ap_ack)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == Output_1_V_V_ap_ack)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
    end else begin
        if (((~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state6)) | (~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state5)) | (~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
        end else if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_2_V_V_ap_ack)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_2_V_V_ap_ack)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == Output_2_V_V_ap_ack)))) begin
            ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state6)) | (~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state5)) | (~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state4)) | (~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state3)) | (~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5)) | ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4)))) begin
        Output_2_V_V_ap_vld = 1'b1;
    end else begin
        Output_2_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        Output_2_V_V_blk_n = Output_2_V_V_ap_ack;
    end else begin
        Output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = Output_2_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V = Input_1_V_V;

assign Output_2_V_V = Input_1_V_V;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

endmodule //Block_proc13
