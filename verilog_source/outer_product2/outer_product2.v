// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="outer_product2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.410000,HLS_SYN_LAT=2232323,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=273,HLS_SYN_LUT=286,HLS_VERSION=2018_2}" *)

module outer_product2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Input_2_V_V,
        Input_2_V_V_ap_vld,
        Input_2_V_V_ap_ack,
        Input_3_V_V,
        Input_3_V_V_ap_vld,
        Input_3_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
input  [31:0] Input_2_V_V;
input   Input_2_V_V_ap_vld;
output   Input_2_V_V_ap_ack;
input  [31:0] Input_3_V_V;
input   Input_3_V_V_ap_vld;
output   Input_3_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Input_2_V_V_ap_ack;
reg Input_3_V_V_ap_ack;
reg[31:0] Output_1_V_V;
reg Output_1_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_261;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    Input_2_V_V_blk_n;
reg    Input_3_V_V_blk_n;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_261_pp0_iter1_reg;
reg   [18:0] indvar_flatten_reg_99;
wire   [0:0] exitcond_flatten_fu_110_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
wire   [18:0] indvar_flatten_next_fu_116_p2;
reg   [18:0] indvar_flatten_next_reg_265;
reg   [31:0] tmp_V_5_reg_270;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] tmp_V_6_reg_275;
wire  signed [67:0] OP1_V_3_cast_fu_130_p1;
reg  signed [67:0] OP1_V_3_cast_reg_280;
reg   [14:0] tmp_reg_286;
reg   [30:0] tmp_2_reg_291;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] loc_V_6_reg_296;
wire    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage4_11001;
reg   [14:0] tmp_4_reg_301;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage1_subdone;
reg   [18:0] ap_phi_mux_indvar_flatten_phi_fu_103_p4;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage2_01001;
wire   [31:0] loc_V_4_fu_190_p3;
wire    ap_block_pp0_stage3_01001;
wire  signed [31:0] loc_V_5_fu_225_p1;
wire    ap_block_pp0_stage4_01001;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] loc_V_7_fu_252_p3;
reg    ap_block_pp0_stage1_01001;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
wire   [33:0] tmp_5_fu_122_p3;
wire  signed [33:0] p_Val2_3_fu_134_p0;
wire  signed [33:0] p_Val2_3_fu_134_p1;
wire   [67:0] p_Val2_3_fu_134_p2;
wire   [33:0] tmp_1_fu_161_p3;
wire  signed [33:0] p_Val2_4_fu_172_p0;
wire  signed [33:0] p_Val2_4_fu_172_p1;
wire   [67:0] p_Val2_4_fu_172_p2;
wire   [15:0] tmp_9_fu_180_p4;
wire  signed [15:0] tmp_8_fu_177_p1;
wire   [33:0] tmp_3_fu_209_p3;
wire  signed [33:0] p_Val2_5_fu_220_p0;
wire  signed [33:0] p_Val2_5_fu_220_p1;
wire   [67:0] p_Val2_5_fu_220_p2;
wire  signed [15:0] tmp_s_fu_249_p1;
wire    ap_CS_fsm_state9;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if ((((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((exitcond_flatten_reg_261_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
        end else if ((((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == Output_1_V_V_ap_ack) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage4_01001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == Output_1_V_V_ap_ack)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == Output_1_V_V_ap_ack)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == Output_1_V_V_ap_ack)) | ((exitcond_flatten_reg_261_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == Output_1_V_V_ap_ack) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_99 <= indvar_flatten_next_reg_265;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_99 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        OP1_V_3_cast_reg_280[67 : 2] <= OP1_V_3_cast_fu_130_p1[67 : 2];
        tmp_reg_286 <= {{p_Val2_3_fu_134_p2[67:53]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_261 <= exitcond_flatten_fu_110_p2;
        exitcond_flatten_reg_261_pp0_iter1_reg <= exitcond_flatten_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_265 <= indvar_flatten_next_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        loc_V_6_reg_296 <= {{p_Val2_5_fu_220_p2[52:21]}};
        tmp_4_reg_301 <= {{p_Val2_5_fu_220_p2[67:53]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_2_reg_291 <= {{p_Val2_4_fu_172_p2[67:37]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_V_5_reg_270 <= Input_1_V_V;
        tmp_V_6_reg_275 <= Input_2_V_V;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Input_2_V_V_ap_ack = 1'b1;
    end else begin
        Input_2_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Input_2_V_V_blk_n = Input_2_V_V_ap_vld;
    end else begin
        Input_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Input_3_V_V_ap_ack = 1'b1;
    end else begin
        Input_3_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Input_3_V_V_blk_n = Input_3_V_V_ap_vld;
    end else begin
        Input_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_261_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Output_1_V_V = loc_V_7_fu_252_p3;
    end else if (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Output_1_V_V = loc_V_6_reg_296;
    end else if (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage4_01001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        Output_1_V_V = loc_V_5_fu_225_p1;
    end else if (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        Output_1_V_V = loc_V_4_fu_190_p3;
    end else if (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        Output_1_V_V = {{p_Val2_3_fu_134_p2[52:21]}};
    end else begin
        Output_1_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_261 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_reg_261 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b0 == ap_block_pp0_stage4_01001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_261 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_261 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_261_pp0_iter1_reg == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4) & (exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_261_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_110_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_103_p4 = indvar_flatten_next_reg_265;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_103_p4 = indvar_flatten_reg_99;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_110_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_110_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_3_cast_fu_130_p1 = $signed(tmp_5_fu_122_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)))) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)))) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state4_io = ((exitcond_flatten_reg_261 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = (((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld)) | ((exitcond_flatten_reg_261 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state5_io = ((exitcond_flatten_reg_261 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((exitcond_flatten_reg_261 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((exitcond_flatten_reg_261 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((exitcond_flatten_reg_261_pp0_iter1_reg == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_110_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_103_p4 == 19'd446464) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_116_p2 = (ap_phi_mux_indvar_flatten_phi_fu_103_p4 + 19'd1);

assign loc_V_4_fu_190_p3 = {{tmp_9_fu_180_p4}, {tmp_8_fu_177_p1}};

assign loc_V_5_fu_225_p1 = $signed(tmp_2_reg_291);

assign loc_V_7_fu_252_p3 = {{16'd0}, {tmp_s_fu_249_p1}};

assign p_Val2_3_fu_134_p0 = OP1_V_3_cast_fu_130_p1;

assign p_Val2_3_fu_134_p1 = OP1_V_3_cast_fu_130_p1;

assign p_Val2_3_fu_134_p2 = ($signed(p_Val2_3_fu_134_p0) * $signed(p_Val2_3_fu_134_p1));

assign p_Val2_4_fu_172_p0 = tmp_1_fu_161_p3;

assign p_Val2_4_fu_172_p1 = OP1_V_3_cast_reg_280;

assign p_Val2_4_fu_172_p2 = ($signed(p_Val2_4_fu_172_p0) * $signed(p_Val2_4_fu_172_p1));

assign p_Val2_5_fu_220_p0 = tmp_3_fu_209_p3;

assign p_Val2_5_fu_220_p1 = OP1_V_3_cast_reg_280;

assign p_Val2_5_fu_220_p2 = ($signed(p_Val2_5_fu_220_p0) * $signed(p_Val2_5_fu_220_p1));

assign tmp_1_fu_161_p3 = {{tmp_V_5_reg_270}, {2'd0}};

assign tmp_3_fu_209_p3 = {{tmp_V_6_reg_275}, {2'd0}};

assign tmp_5_fu_122_p3 = {{Input_3_V_V}, {2'd0}};

assign tmp_8_fu_177_p1 = $signed(tmp_reg_286);

assign tmp_9_fu_180_p4 = {{p_Val2_4_fu_172_p2[36:21]}};

assign tmp_s_fu_249_p1 = $signed(tmp_4_reg_301);

always @ (posedge ap_clk) begin
    OP1_V_3_cast_reg_280[1:0] <= 2'b00;
end

endmodule //outer_product2
