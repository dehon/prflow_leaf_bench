// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rasterization2_odd,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.802000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=1784,HLS_SYN_LUT=1605,HLS_VERSION=2018_2}" *)

module rasterization2_odd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 18'd16384;
parameter    ap_ST_fsm_state37 = 18'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 18'd65536;
parameter    ap_ST_fsm_state41 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg[31:0] Output_1_V_V;
reg Output_1_V_V_ap_vld;
reg[31:0] Output_2_V_V;
reg Output_2_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] fragment_x_V_address0;
reg    fragment_x_V_ce0;
reg    fragment_x_V_we0;
wire   [7:0] fragment_x_V_q0;
reg   [8:0] fragment_y_V_address0;
reg    fragment_y_V_ce0;
reg    fragment_y_V_we0;
wire   [7:0] fragment_y_V_q0;
reg   [8:0] fragment_z_V_address0;
reg    fragment_z_V_ce0;
reg    fragment_z_V_we0;
wire   [7:0] fragment_z_V_q0;
reg   [8:0] fragment_color_V_address0;
reg    fragment_color_V_ce0;
reg    fragment_color_V_we0;
wire   [7:0] fragment_color_V_q0;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    Output_1_V_V_blk_n;
reg   [0:0] tmp_s_reg_588;
wire    ap_CS_fsm_state37;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_21_reg_818;
reg    Output_2_V_V_blk_n;
reg   [15:0] t_V_4_reg_189;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state15_pp0_stage0_iter0;
wire    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
wire    ap_block_state18_pp0_stage0_iter3;
wire    ap_block_state19_pp0_stage0_iter4;
wire    ap_block_state20_pp0_stage0_iter5;
wire    ap_block_state21_pp0_stage0_iter6;
wire    ap_block_state22_pp0_stage0_iter7;
wire    ap_block_state23_pp0_stage0_iter8;
wire    ap_block_state24_pp0_stage0_iter9;
wire    ap_block_state25_pp0_stage0_iter10;
wire    ap_block_state26_pp0_stage0_iter11;
wire    ap_block_state27_pp0_stage0_iter12;
wire    ap_block_state28_pp0_stage0_iter13;
wire    ap_block_state29_pp0_stage0_iter14;
wire    ap_block_state30_pp0_stage0_iter15;
wire    ap_block_state31_pp0_stage0_iter16;
wire    ap_block_state32_pp0_stage0_iter17;
wire    ap_block_state33_pp0_stage0_iter18;
wire    ap_block_state34_pp0_stage0_iter19;
wire    ap_block_state35_pp0_stage0_iter20;
wire    ap_block_state36_pp0_stage0_iter21;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] j_reg_201;
wire   [0:0] tmp_s_fu_225_p2;
reg    ap_block_state1;
wire   [7:0] triangle_2d_same_x0_s_fu_231_p1;
reg   [7:0] triangle_2d_same_x0_s_reg_592;
wire   [7:0] triangle_2d_same_y0_s_fu_235_p1;
reg   [7:0] triangle_2d_same_y0_s_reg_597;
wire   [7:0] triangle_2d_same_x1_s_fu_239_p1;
reg   [7:0] triangle_2d_same_x1_s_reg_602;
wire   [7:0] triangle_2d_same_y1_s_fu_243_p1;
reg   [7:0] triangle_2d_same_y1_s_reg_607;
wire   [7:0] triangle_2d_same_x2_s_fu_247_p1;
reg   [7:0] triangle_2d_same_x2_s_reg_612;
wire   [7:0] triangle_2d_same_y2_s_fu_251_p1;
reg   [7:0] triangle_2d_same_y2_s_reg_617;
wire   [7:0] triangle_2d_same_z_V_fu_255_p1;
reg   [7:0] triangle_2d_same_z_V_reg_622;
wire   [15:0] tmp_13_fu_259_p1;
reg   [15:0] tmp_13_reg_627;
wire   [7:0] tmp_14_fu_263_p1;
reg   [7:0] tmp_14_reg_632;
wire   [7:0] tmp_15_fu_267_p1;
reg   [7:0] tmp_15_reg_637;
wire   [15:0] tmp_2_cast_fu_275_p1;
reg   [15:0] tmp_2_cast_reg_663;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_sig_ioackin_Output_2_V_V_ap_ack;
reg    ap_block_state14_io;
wire   [8:0] rhs_V_12_fu_279_p1;
reg   [8:0] rhs_V_12_reg_669;
wire   [8:0] lhs_V_14_fu_282_p1;
reg   [8:0] lhs_V_14_reg_674;
wire   [8:0] rhs_V_13_fu_285_p1;
reg   [8:0] rhs_V_13_reg_679;
wire  signed [17:0] rhs_V_2_fu_294_p1;
reg  signed [17:0] rhs_V_2_reg_684;
wire   [8:0] lhs_V_15_fu_298_p1;
reg   [8:0] lhs_V_15_reg_689;
wire  signed [17:0] rhs_V_3_fu_307_p1;
reg  signed [17:0] rhs_V_3_reg_694;
wire   [8:0] lhs_V_16_fu_311_p1;
reg   [8:0] lhs_V_16_reg_699;
wire  signed [17:0] rhs_V_7_fu_320_p1;
reg  signed [17:0] rhs_V_7_reg_704;
wire   [8:0] lhs_V_17_fu_324_p1;
reg   [8:0] lhs_V_17_reg_709;
wire  signed [17:0] rhs_V_8_fu_333_p1;
reg  signed [17:0] rhs_V_8_reg_714;
wire  signed [17:0] rhs_V_4_fu_343_p1;
reg  signed [17:0] rhs_V_4_reg_719;
wire  signed [17:0] rhs_V_fu_353_p1;
reg  signed [17:0] rhs_V_reg_724;
wire   [0:0] exitcond1_fu_372_p2;
reg   [0:0] exitcond1_reg_729;
wire   [15:0] k_V_fu_377_p2;
reg   [15:0] k_V_reg_733;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] x_V_fu_397_p2;
reg   [7:0] x_V_reg_738;
reg   [7:0] x_V_reg_738_pp0_iter20_reg;
wire   [7:0] y_V_fu_406_p2;
reg   [7:0] y_V_reg_744;
reg   [7:0] y_V_reg_744_pp0_iter20_reg;
wire  signed [17:0] grp_fu_546_p3;
reg  signed [17:0] r_V_7_reg_751;
reg    ap_enable_reg_pp0_iter20;
wire  signed [17:0] grp_fu_552_p3;
reg  signed [17:0] r_V_14_reg_756;
wire  signed [17:0] grp_fu_558_p3;
reg  signed [17:0] r_V_21_reg_761;
wire   [0:0] exitcond_fu_508_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state38_pp1_stage0_iter0;
wire    ap_block_state39_pp1_stage0_iter1;
wire    ap_block_state40_pp1_stage0_iter2;
reg    ap_block_state40_io;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] j_1_fu_514_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [7:0] fragment_x_V_load_reg_798;
reg    ap_enable_reg_pp1_iter1;
reg   [7:0] fragment_y_V_load_reg_803;
reg   [7:0] fragment_z_V_load_reg_808;
reg   [7:0] fragment_color_V_loa_reg_813;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter21;
reg    ap_block_state37_io;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state38;
reg   [15:0] ap_phi_mux_t_V_4_phi_fu_193_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_8_fu_434_p1;
wire   [0:0] tmp_19_fu_426_p3;
wire   [63:0] tmp_2_fu_520_p1;
reg   [15:0] t_V_2_fu_70;
wire   [15:0] t_V_3_fu_475_p3;
reg   [15:0] t_V_1_fu_74;
wire   [15:0] i_top_V_1_fu_467_p3;
reg   [15:0] t_V_fu_78;
wire   [15:0] i_V_fu_442_p2;
wire   [31:0] tmp_V_12_fu_498_p1;
wire   [31:0] p_Result_s_fu_536_p5;
wire    ap_block_pp1_stage0_01001;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
wire   [31:0] tmp_V_13_fu_503_p1;
reg    ap_reg_ioackin_Output_2_V_V_ap_ack;
wire   [1:0] flag_V_fu_221_p1;
wire   [7:0] tmp_16_fu_271_p1;
wire   [8:0] r_V_3_fu_288_p2;
wire   [8:0] r_V_6_fu_301_p2;
wire   [8:0] r_V_18_fu_314_p2;
wire   [8:0] r_V_10_fu_327_p2;
wire   [8:0] r_V_13_fu_337_p2;
wire   [8:0] r_V_17_fu_347_p2;
wire   [7:0] grp_fu_383_p1;
wire   [7:0] grp_fu_388_p1;
wire   [7:0] grp_fu_383_p2;
wire   [7:0] r_V_fu_393_p1;
wire   [7:0] grp_fu_388_p2;
wire   [7:0] tmp_18_fu_402_p1;
wire  signed [17:0] grp_fu_564_p4;
wire  signed [17:0] grp_fu_572_p4;
wire   [17:0] tmp1_fu_417_p2;
wire  signed [17:0] grp_fu_580_p4;
wire   [17:0] tmp_i_fu_421_p2;
wire   [0:0] tmp_20_fu_448_p3;
wire   [15:0] i_top_V_fu_455_p2;
wire   [15:0] i_bot_V_fu_461_p2;
wire   [7:0] grp_fu_546_p0;
wire   [8:0] lhs_V_3_fu_411_p1;
wire   [7:0] grp_fu_546_p1;
wire  signed [8:0] grp_fu_546_p2;
wire   [7:0] grp_fu_552_p0;
wire   [7:0] grp_fu_552_p1;
wire  signed [8:0] grp_fu_552_p2;
wire   [7:0] grp_fu_558_p0;
wire   [7:0] grp_fu_558_p1;
wire  signed [8:0] grp_fu_558_p2;
wire   [7:0] grp_fu_564_p0;
wire   [8:0] lhs_V_fu_414_p1;
wire   [7:0] grp_fu_564_p1;
wire  signed [8:0] grp_fu_564_p2;
wire   [7:0] grp_fu_572_p0;
wire   [7:0] grp_fu_572_p1;
wire  signed [8:0] grp_fu_572_p2;
wire   [7:0] grp_fu_580_p0;
wire   [7:0] grp_fu_580_p1;
wire  signed [8:0] grp_fu_580_p2;
wire    ap_CS_fsm_state41;
reg   [17:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_Output_2_V_V_ap_ack = 1'b0;
end

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_x_V_address0),
    .ce0(fragment_x_V_ce0),
    .we0(fragment_x_V_we0),
    .d0(x_V_reg_738_pp0_iter20_reg),
    .q0(fragment_x_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_y_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_y_V_address0),
    .ce0(fragment_y_V_ce0),
    .we0(fragment_y_V_we0),
    .d0(y_V_reg_744_pp0_iter20_reg),
    .q0(fragment_y_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_z_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_z_V_address0),
    .ce0(fragment_z_V_ce0),
    .we0(fragment_z_V_we0),
    .d0(triangle_2d_same_z_V_reg_622),
    .q0(fragment_z_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_color_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_color_V_address0),
    .ce0(fragment_color_V_ce0),
    .we0(fragment_color_V_we0),
    .d0(8'd100),
    .q0(fragment_color_V_q0)
);

rasterization2_odfYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rasterization2_odfYi_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_4_phi_fu_193_p4),
    .din1(grp_fu_383_p1),
    .ce(1'b1),
    .dout(grp_fu_383_p2)
);

rasterization2_odg8j #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rasterization2_odg8j_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_4_phi_fu_193_p4),
    .din1(grp_fu_388_p1),
    .ce(1'b1),
    .dout(grp_fu_388_p2)
);

rasterization2_odhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
rasterization2_odhbi_U3(
    .din0(grp_fu_546_p0),
    .din1(grp_fu_546_p1),
    .din2(grp_fu_546_p2),
    .dout(grp_fu_546_p3)
);

rasterization2_odhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
rasterization2_odhbi_U4(
    .din0(grp_fu_552_p0),
    .din1(grp_fu_552_p1),
    .din2(grp_fu_552_p2),
    .dout(grp_fu_552_p3)
);

rasterization2_odhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
rasterization2_odhbi_U5(
    .din0(grp_fu_558_p0),
    .din1(grp_fu_558_p1),
    .din2(grp_fu_558_p2),
    .dout(grp_fu_558_p3)
);

rasterization2_odibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_odibs_U6(
    .din0(grp_fu_564_p0),
    .din1(grp_fu_564_p1),
    .din2(grp_fu_564_p2),
    .din3(r_V_7_reg_751),
    .dout(grp_fu_564_p4)
);

rasterization2_odibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_odibs_U7(
    .din0(grp_fu_572_p0),
    .din1(grp_fu_572_p1),
    .din2(grp_fu_572_p2),
    .din3(r_V_14_reg_756),
    .dout(grp_fu_572_p4)
);

rasterization2_odibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_odibs_U8(
    .din0(grp_fu_580_p0),
    .din1(grp_fu_580_p1),
    .din2(grp_fu_580_p2),
    .din3(r_V_21_reg_761),
    .dout(grp_fu_580_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state15)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end else if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd1))) begin
            ap_enable_reg_pp0_iter21 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state38) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state38)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state38);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd1)) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | (~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
        end else if ((((1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == Output_1_V_V_ap_ack) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd1)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd0)) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | (~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0)))) begin
            ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
        end else if ((((1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == Output_2_V_V_ap_ack) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd0)) | ((1'b1 == Output_2_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == Output_2_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0)))) begin
            ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_508_p2 == 1'd0))) begin
        j_reg_201 <= j_1_fu_514_p2;
    end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        j_reg_201 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_19_fu_426_p3 == 1'd0))) begin
        t_V_1_fu_74 <= i_top_V_1_fu_467_p3;
    end else if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd1))) begin
        t_V_1_fu_74 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_19_fu_426_p3 == 1'd0))) begin
        t_V_2_fu_70 <= t_V_3_fu_475_p3;
    end else if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd1))) begin
        t_V_2_fu_70 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd1))) begin
        t_V_4_reg_189 <= 16'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_729 == 1'd0))) begin
        t_V_4_reg_189 <= k_V_reg_733;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_19_fu_426_p3 == 1'd0))) begin
        t_V_fu_78 <= i_V_fu_442_p2;
    end else if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd1))) begin
        t_V_fu_78 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_729 <= exitcond1_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fragment_color_V_loa_reg_813 <= fragment_color_V_q0;
        fragment_x_V_load_reg_798 <= fragment_x_V_q0;
        fragment_y_V_load_reg_803 <= fragment_y_V_q0;
        fragment_z_V_load_reg_808 <= fragment_z_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_V_reg_733 <= k_V_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd1))) begin
        lhs_V_14_reg_674[7 : 0] <= lhs_V_14_fu_282_p1[7 : 0];
        lhs_V_15_reg_689[7 : 0] <= lhs_V_15_fu_298_p1[7 : 0];
        lhs_V_16_reg_699[7 : 0] <= lhs_V_16_fu_311_p1[7 : 0];
        lhs_V_17_reg_709[7 : 0] <= lhs_V_17_fu_324_p1[7 : 0];
        rhs_V_12_reg_669[7 : 0] <= rhs_V_12_fu_279_p1[7 : 0];
        rhs_V_13_reg_679[7 : 0] <= rhs_V_13_fu_285_p1[7 : 0];
        rhs_V_2_reg_684 <= rhs_V_2_fu_294_p1;
        rhs_V_3_reg_694 <= rhs_V_3_fu_307_p1;
        rhs_V_4_reg_719 <= rhs_V_4_fu_343_p1;
        rhs_V_7_reg_704 <= rhs_V_7_fu_320_p1;
        rhs_V_8_reg_714 <= rhs_V_8_fu_333_p1;
        rhs_V_reg_724 <= rhs_V_fu_353_p1;
        tmp_2_cast_reg_663[7 : 0] <= tmp_2_cast_fu_275_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        r_V_14_reg_756 <= grp_fu_552_p3;
        r_V_21_reg_761 <= grp_fu_558_p3;
        r_V_7_reg_751 <= grp_fu_546_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_13_reg_627 <= tmp_13_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_14_reg_632 <= tmp_14_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_15_reg_637 <= tmp_15_fu_267_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_21_reg_818 <= fragment_y_V_q0[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_s_reg_588 <= tmp_s_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        triangle_2d_same_x0_s_reg_592 <= triangle_2d_same_x0_s_fu_231_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
        triangle_2d_same_x1_s_reg_602 <= triangle_2d_same_x1_s_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
        triangle_2d_same_x2_s_reg_612 <= triangle_2d_same_x2_s_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
        triangle_2d_same_y0_s_reg_597 <= triangle_2d_same_y0_s_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
        triangle_2d_same_y1_s_reg_607 <= triangle_2d_same_y1_s_fu_243_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7))) begin
        triangle_2d_same_y2_s_reg_617 <= triangle_2d_same_y2_s_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8))) begin
        triangle_2d_same_z_V_reg_622 <= triangle_2d_same_z_V_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        x_V_reg_738 <= x_V_fu_397_p2;
        x_V_reg_738_pp0_iter20_reg <= x_V_reg_738;
        y_V_reg_744 <= y_V_fu_406_p2;
        y_V_reg_744_pp0_iter20_reg <= y_V_reg_744;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd1))) begin
        Output_1_V_V = p_Result_s_fu_536_p5;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        Output_1_V_V = tmp_V_12_fu_498_p1;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0))) begin
        Output_1_V_V = 32'd0;
    end else begin
        Output_1_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd1)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == Input_1_V_V_ap_vld) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd0))) begin
        Output_2_V_V = p_Result_s_fu_536_p5;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        Output_2_V_V = tmp_V_13_fu_503_p1;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0))) begin
        Output_2_V_V = 32'd0;
    end else begin
        Output_2_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_21_reg_818 == 1'd0)) | ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == Input_1_V_V_ap_vld) & (ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0)))) begin
        Output_2_V_V_ap_vld = 1'b1;
    end else begin
        Output_2_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (tmp_21_reg_818 == 1'd0)) | ((1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0)))) begin
        Output_2_V_V_blk_n = Output_2_V_V_ap_ack;
    end else begin
        Output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond1_fu_372_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_508_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_729 == 1'd0))) begin
        ap_phi_mux_t_V_4_phi_fu_193_p4 = k_V_reg_733;
    end else begin
        ap_phi_mux_t_V_4_phi_fu_193_p4 = t_V_4_reg_189;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = Output_2_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_color_V_address0 = tmp_2_fu_520_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment_color_V_address0 = tmp_8_fu_434_p1;
    end else begin
        fragment_color_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
        fragment_color_V_ce0 = 1'b1;
    end else begin
        fragment_color_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_19_fu_426_p3 == 1'd0))) begin
        fragment_color_V_we0 = 1'b1;
    end else begin
        fragment_color_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_x_V_address0 = tmp_2_fu_520_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment_x_V_address0 = tmp_8_fu_434_p1;
    end else begin
        fragment_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
        fragment_x_V_ce0 = 1'b1;
    end else begin
        fragment_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_19_fu_426_p3 == 1'd0))) begin
        fragment_x_V_we0 = 1'b1;
    end else begin
        fragment_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_y_V_address0 = tmp_2_fu_520_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment_y_V_address0 = tmp_8_fu_434_p1;
    end else begin
        fragment_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
        fragment_y_V_ce0 = 1'b1;
    end else begin
        fragment_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_19_fu_426_p3 == 1'd0))) begin
        fragment_y_V_we0 = 1'b1;
    end else begin
        fragment_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_z_V_address0 = tmp_2_fu_520_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment_z_V_address0 = tmp_8_fu_434_p1;
    end else begin
        fragment_z_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
        fragment_z_V_ce0 = 1'b1;
    end else begin
        fragment_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_19_fu_426_p3 == 1'd0))) begin
        fragment_z_V_we0 = 1'b1;
    end else begin
        fragment_z_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b1 == ap_block_state14_io) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_588 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_372_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_372_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_508_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_508_p2 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state14_io = (((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) & (tmp_s_reg_588 == 1'd0)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) & (tmp_s_reg_588 == 1'd0)));
end

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state38_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_io = (((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) & (tmp_21_reg_818 == 1'd0)) | ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) & (tmp_21_reg_818 == 1'd1)));
end

assign ap_block_state40_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond1_fu_372_p2 = ((ap_phi_mux_t_V_4_phi_fu_193_p4 == tmp_13_reg_627) ? 1'b1 : 1'b0);

assign exitcond_fu_508_p2 = ((j_reg_201 == t_V_fu_78) ? 1'b1 : 1'b0);

assign flag_V_fu_221_p1 = Input_1_V_V[1:0];

assign grp_fu_383_p1 = tmp_2_cast_reg_663;

assign grp_fu_388_p1 = tmp_2_cast_reg_663;

assign grp_fu_546_p0 = lhs_V_3_fu_411_p1;

assign grp_fu_546_p1 = rhs_V_13_reg_679;

assign grp_fu_546_p2 = rhs_V_3_reg_694;

assign grp_fu_552_p0 = lhs_V_3_fu_411_p1;

assign grp_fu_552_p1 = lhs_V_14_reg_674;

assign grp_fu_552_p2 = rhs_V_8_reg_714;

assign grp_fu_558_p0 = lhs_V_3_fu_411_p1;

assign grp_fu_558_p1 = lhs_V_16_reg_699;

assign grp_fu_558_p2 = rhs_V_reg_724;

assign grp_fu_564_p0 = lhs_V_fu_414_p1;

assign grp_fu_564_p1 = rhs_V_12_reg_669;

assign grp_fu_564_p2 = rhs_V_2_reg_684;

assign grp_fu_572_p0 = lhs_V_fu_414_p1;

assign grp_fu_572_p1 = lhs_V_15_reg_689;

assign grp_fu_572_p2 = rhs_V_7_reg_704;

assign grp_fu_580_p0 = lhs_V_fu_414_p1;

assign grp_fu_580_p1 = lhs_V_17_reg_709;

assign grp_fu_580_p2 = rhs_V_4_reg_719;

assign i_V_fu_442_p2 = (t_V_fu_78 + 16'd1);

assign i_bot_V_fu_461_p2 = (t_V_2_fu_70 + 16'd1);

assign i_top_V_1_fu_467_p3 = ((tmp_20_fu_448_p3[0:0] === 1'b1) ? i_top_V_fu_455_p2 : t_V_1_fu_74);

assign i_top_V_fu_455_p2 = (t_V_1_fu_74 + 16'd1);

assign j_1_fu_514_p2 = (j_reg_201 + 16'd1);

assign k_V_fu_377_p2 = (ap_phi_mux_t_V_4_phi_fu_193_p4 + 16'd1);

assign lhs_V_14_fu_282_p1 = triangle_2d_same_y1_s_reg_607;

assign lhs_V_15_fu_298_p1 = triangle_2d_same_x1_s_reg_602;

assign lhs_V_16_fu_311_p1 = triangle_2d_same_y2_s_reg_617;

assign lhs_V_17_fu_324_p1 = triangle_2d_same_x2_s_reg_612;

assign lhs_V_3_fu_411_p1 = y_V_reg_744;

assign lhs_V_fu_414_p1 = x_V_reg_738_pp0_iter20_reg;

assign p_Result_s_fu_536_p5 = {{{{fragment_color_V_loa_reg_813}, {fragment_z_V_load_reg_808}}, {fragment_y_V_load_reg_803}}, {fragment_x_V_load_reg_798}};

assign r_V_10_fu_327_p2 = (lhs_V_17_fu_324_p1 - lhs_V_15_fu_298_p1);

assign r_V_13_fu_337_p2 = (rhs_V_13_fu_285_p1 - lhs_V_16_fu_311_p1);

assign r_V_17_fu_347_p2 = (rhs_V_12_fu_279_p1 - lhs_V_17_fu_324_p1);

assign r_V_18_fu_314_p2 = (lhs_V_16_fu_311_p1 - lhs_V_14_fu_282_p1);

assign r_V_3_fu_288_p2 = (lhs_V_14_fu_282_p1 - rhs_V_13_fu_285_p1);

assign r_V_6_fu_301_p2 = (lhs_V_15_fu_298_p1 - rhs_V_12_fu_279_p1);

assign r_V_fu_393_p1 = grp_fu_383_p2[7:0];

assign rhs_V_12_fu_279_p1 = triangle_2d_same_x0_s_reg_592;

assign rhs_V_13_fu_285_p1 = triangle_2d_same_y0_s_reg_597;

assign rhs_V_2_fu_294_p1 = $signed(r_V_3_fu_288_p2);

assign rhs_V_3_fu_307_p1 = $signed(r_V_6_fu_301_p2);

assign rhs_V_4_fu_343_p1 = $signed(r_V_13_fu_337_p2);

assign rhs_V_7_fu_320_p1 = $signed(r_V_18_fu_314_p2);

assign rhs_V_8_fu_333_p1 = $signed(r_V_10_fu_327_p2);

assign rhs_V_fu_353_p1 = $signed(r_V_17_fu_347_p2);

assign t_V_3_fu_475_p3 = ((tmp_20_fu_448_p3[0:0] === 1'b1) ? t_V_2_fu_70 : i_bot_V_fu_461_p2);

assign tmp1_fu_417_p2 = (grp_fu_572_p4 | grp_fu_564_p4);

assign tmp_13_fu_259_p1 = Input_1_V_V[15:0];

assign tmp_14_fu_263_p1 = Input_1_V_V[7:0];

assign tmp_15_fu_267_p1 = Input_1_V_V[7:0];

assign tmp_16_fu_271_p1 = Input_1_V_V[7:0];

assign tmp_18_fu_402_p1 = grp_fu_388_p2[7:0];

assign tmp_19_fu_426_p3 = tmp_i_fu_421_p2[32'd17];

assign tmp_20_fu_448_p3 = y_V_reg_744_pp0_iter20_reg[32'd7];

assign tmp_2_cast_fu_275_p1 = tmp_16_fu_271_p1;

assign tmp_2_fu_520_p1 = j_reg_201;

assign tmp_8_fu_434_p1 = t_V_fu_78;

assign tmp_V_12_fu_498_p1 = t_V_1_fu_74;

assign tmp_V_13_fu_503_p1 = t_V_2_fu_70;

assign tmp_i_fu_421_p2 = (tmp1_fu_417_p2 | grp_fu_580_p4);

assign tmp_s_fu_225_p2 = ((flag_V_fu_221_p1 == 2'd0) ? 1'b1 : 1'b0);

assign triangle_2d_same_x0_s_fu_231_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_x1_s_fu_239_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_x2_s_fu_247_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_y0_s_fu_235_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_y1_s_fu_243_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_y2_s_fu_251_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_z_V_fu_255_p1 = Input_1_V_V[7:0];

assign x_V_fu_397_p2 = (r_V_fu_393_p1 + tmp_14_reg_632);

assign y_V_fu_406_p2 = (tmp_18_fu_402_p1 + tmp_15_reg_637);

always @ (posedge ap_clk) begin
    tmp_2_cast_reg_663[15:8] <= 8'b00000000;
    rhs_V_12_reg_669[8] <= 1'b0;
    lhs_V_14_reg_674[8] <= 1'b0;
    rhs_V_13_reg_679[8] <= 1'b0;
    lhs_V_15_reg_689[8] <= 1'b0;
    lhs_V_16_reg_699[8] <= 1'b0;
    lhs_V_17_reg_709[8] <= 1'b0;
end

endmodule //rasterization2_odd
